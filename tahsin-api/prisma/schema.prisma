generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TeacherStatus {
  ONLINE
  OFFLINE
  HYBRID
}

enum MeetingTypeEnum {
  ONLINE
  OFFLINE
}

enum MeetingTimeEnum {
  MORNING
  EVENING
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
}

enum PaymentStatus {
  PAID
  UNPAID
  INSTALLMENT
}

enum Days {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum SessionName {
  SESSION_1
  MORNING_SESSION
  AFTERNOON_SESSION
  EVENING_SESSION
}

enum FeeType {
  TUITION_FEE
  DOWN_PAYMENT
  FINAL_INSTALLMENT
  LAB_FEE
  ACTIVITY_FEE
}

enum PaymentConfirmationStatus {
  UNPAID
  PENDING
  VERIFIED
  REJECTED
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  DROPOUT
  GRADUATED
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}

model Profile {
  id                 Int      @id @default(autoincrement())
  name               String   @db.VarChar(255)
  place_of_birth     String   @db.VarChar(255)
  date_of_birth      DateTime @db.Date
  address            String   @db.VarChar(255)
  domicile           String   @db.VarChar(255)
  phone_number       String   @db.VarChar(20)
  profession         String   @db.VarChar(255)
  previous_education String   @db.VarChar(255)
  intended_program   String?  @db.VarChar(255)
  user_id            Int      @unique
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  admin_id           Int?
  user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique(map: "roles_name_unique") @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      User[]
}

model User {
  id                 Int            @id @default(autoincrement())
  email              String         @unique(map: "users_email_unique") @db.VarChar(255)
  password           String         @db.VarChar(255)
  username           String         @unique @db.VarChar(255)
  hashedRefreshToken String?        @db.VarChar(255)
  role_id            Int            @default(2)
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  admin_id           Int?
  // registrations      Registration[]
  profile            Profile?
  role               Role           @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_role_id_foreign")
  Teacher            Teacher?
  Student            Student?
  Admin              Admin?
  Registration       Registration[]
}

model Event {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(255)
  is_active         Boolean            @default(true)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  academicCalenders AcademicCalender[]
}

model Level {
  id         Int       @id @default(autoincrement())
  name       String    @unique(map: "levels_name_unique") @db.VarChar(255)
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  classes    Class[]
  Student    Student[]
}

model Teacher {
  id         Int           @id @default(autoincrement())
  user_id    Int           @unique
  status     TeacherStatus @default(OFFLINE)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  User       User?         @relation(fields: [user_id], references: [id])
  Class      Class[]
}

model Student {
  id              Int           @id @default(autoincrement())
  registration_id Int
  level_id        Int
  user_id         Int           @unique
  status          StudentStatus @default(INACTIVE)
  admin_id        Int?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  Level               Level?                @relation(fields: [level_id], references: [id])
  Registration        Registration?         @relation(fields: [registration_id], references: [id])
  User                User?                 @relation(fields: [user_id], references: [id])
  PaymentConfirmation PaymentConfirmation[]
}

model Admin {
  id                     Int                      @id @default(autoincrement())
  user_id                Int                      @unique
  status                 AdminStatus              @default(ACTIVE)
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  User                   User?                    @relation(fields: [user_id], references: [id])
  AcademicTerm           AcademicTerm[]
  AcademicCalender       AcademicCalender[]
  AcademicTermPaymentFee AcademicTermPaymentFee[]
  PaymentConfirmation    PaymentConfirmation[]
  Registration           Registration[]
}

model Component {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  // grade_components GradeComponent[]
}

model Schedules {
  id         Int             @id @default(autoincrement())
  day_id     Int
  time_id    Int
  type       MeetingTypeEnum
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  Time       Time?           @relation(fields: [time_id], references: [id])
  Day        Day?            @relation(fields: [day_id], references: [id])
}

model Time {
  id           Int         @id @default(autoincrement())
  start_time   Int
  end_time     Int
  session_name SessionName
  is_active    Boolean     @default(true)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  schedules    Schedules[]

  @@unique([start_time, end_time])
}

model Day {
  id         Int         @id @default(autoincrement())
  name       Days        @unique
  is_active  Boolean     @default(true)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  schedules  Schedules[]
}

model BankAccounts {
  id             Int      @id @default(autoincrement())
  account_name   String   @unique @db.VarChar(255)
  account_number Int      @unique
  bank_name      String   @db.VarChar(100)
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model CourseFee {
  id         Int      @id @default(autoincrement())
  fee        Int
  class_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  // class Class @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model AcademicTerm {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  start_date  DateTime
  end_date    DateTime
  description String?  @db.VarChar(500)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  admin_id    Int?

  Admin                  Admin?                   @relation(fields: [admin_id], references: [id])
  academicCalenders      AcademicCalender[]
  AcademicTermPaymentFee AcademicTermPaymentFee[]
  Registration           Registration[]
}

model AcademicCalender {
  id              Int      @id @default(autoincrement())
  academicTerm_id Int
  event_id        Int
  start_date      DateTime
  end_date        DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  admin_id        Int?
  is_active       Boolean  @default(true)

  Admin        Admin?        @relation(fields: [admin_id], references: [id])
  AcademicTerm AcademicTerm? @relation(fields: [academicTerm_id], references: [id])
  Event        Event?        @relation(fields: [event_id], references: [id])
}

model Class {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(255)
  teacher_id Int
  level_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Teacher    Teacher? @relation(fields: [teacher_id], references: [id])
  Level      Level?   @relation(fields: [level_id], references: [id])
}

model AcademicTermPaymentFee {
  id              Int      @id @default(autoincrement())
  academicTerm_id Int      @unique
  type            FeeType
  amount          Int
  description     String?  @db.VarChar(500)
  due_date        DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  admin_id        Int?

  Admin Admin? @relation(fields: [admin_id], references: [id])

  AcademicTerm        AcademicTerm?         @relation(fields: [academicTerm_id], references: [id])
  PaymentConfirmation PaymentConfirmation[]
}

model Registration {
  id                 Int             @id @default(autoincrement())
  session_type       MeetingTypeEnum
  session_time       MeetingTimeEnum
  objective          String          @db.VarChar(500)
  academicTerm_id    Int
  user_id            Int
  audio_path         String?         @db.VarChar(255)
  available_dateTime DateTime?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  admin_id           Int?

  AcademicTerm AcademicTerm? @relation(fields: [academicTerm_id], references: [id])
  User         User?         @relation(fields: [user_id], references: [id])
  Admin        Admin?        @relation(fields: [admin_id], references: [id])
  Student      Student[]
}

model PaymentConfirmation {
  id                        Int                       @id @default(autoincrement())
  payment_receipt_img_path  String?                   @db.VarChar(255)
  amount                    Int
  outstanding_amount        Int
  transaction_number        String?                   @unique
  transaction_date          DateTime
  status                    PaymentConfirmationStatus @default(UNPAID)
  notes                     String?                   @db.VarChar(500)
  created_at                DateTime                  @default(now())
  updated_at                DateTime                  @updatedAt
  academicTermPaymentFee_id Int
  student_id                Int
  admin_id                  Int?

  AcademicTermPaymentFee AcademicTermPaymentFee? @relation(fields: [academicTermPaymentFee_id], references: [id])
  Student                Student?                @relation(fields: [student_id], references: [id])
  Admin                  Admin?                  @relation(fields: [admin_id], references: [id])
}
