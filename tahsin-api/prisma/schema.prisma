generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TeacherStatus {
  ONLINE
  OFFLINE
  HYBRID
}

enum MeetingTypeEnum {
  ONLINE
  OFFLINE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
}

enum PaymentStatus {
  PAID
  UNPAID
  INSTALLMENT
}

enum Days {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum SessionName {
  SESSION_1
  MORNING_SESSION
  AFTERNOON_SESSION
  EVENING_SESSION
}

model Profile {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(255)
  place_of_birth String   @db.VarChar(255)
  date_of_birth  DateTime @db.Date
  address        String   @db.VarChar(255)
  domicile       String   @db.VarChar(255)
  phone_number   String   @db.VarChar(20)
  profession     String   @db.VarChar(255)
  user_id        Int      @unique
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique(map: "roles_name_unique") @db.VarChar(255)
  users User[]
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique(map: "users_email_unique") @db.VarChar(255)
  password           String   @db.VarChar(255)
  username           String   @unique @db.VarChar(255)
  hashedRefreshToken String?  @db.VarChar(255)
  role_id            Int      @default(2)
  // registrations      Registration[]
  profile            Profile?
  role               Role     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_role_id_foreign")
  Teacher            Teacher?
  Class Class[]
}

model Event {
  id        Int     @id @default(autoincrement())
  name      String  @unique @db.VarChar(255)
  is_active Boolean @default(true)

  academicCalenders AcademicCalender[]
}

model Level {
  id        Int     @id @default(autoincrement())
  name      String  @unique(map: "levels_name_unique") @db.VarChar(255)
  is_active Boolean @default(true)

  classes Class[]
}

model Teacher {
  id      Int           @id @default(autoincrement())
  user_id Int           @unique
  status  TeacherStatus @default(OFFLINE)

  user    User    @relation(fields: [user_id], references: [id])
}

model Component {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(100)

  // grade_components GradeComponent[]
}

model Schedules {
  id      Int             @id @default(autoincrement())
  day_id  Int
  time_id Int
  type    MeetingTypeEnum

  Time Time? @relation(fields: [time_id], references: [id])
  Day  Day?  @relation(fields: [day_id], references: [id])
}

model Time {
  id           Int         @id @default(autoincrement())
  start_time   Int
  end_time     Int
  session_name SessionName
  is_active    Boolean     @default(true)

  schedules Schedules[]

  @@unique([start_time, end_time])
}

model Day {
  id        Int     @id @default(autoincrement())
  name      Days    @unique
  is_active Boolean @default(true)

  schedules Schedules[]
}

model BankAccounts {
  id             Int     @id @default(autoincrement())
  account_name   String  @unique @db.VarChar(255)
  account_number Int     @unique
  bank_name      String  @db.VarChar(100)
  is_active      Boolean @default(true)
}

model CourseFee {
  id       Int @id @default(autoincrement())
  fee      Int
  class_id Int

  // class Class @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model AcademicTerm {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  academicCalenders AcademicCalender[]
}

model AcademicCalender {
  id              Int      @id @default(autoincrement())
  academicTerm_id Int
  event_id        Int
  start_date      DateTime
  end_date        DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  AcademicTerm AcademicTerm? @relation(fields: [academicTerm_id], references: [id])
  Event        Event?        @relation(fields: [event_id], references: [id])
}

model Class {
  id         Int    @id @default(autoincrement())
  name       String @unique @db.VarChar(255)
  user_id Int
  level_id   Int

  User User? @relation(fields: [user_id], references: [id])
  Level    Level?   @relation(fields: [level_id], references: [id])
}
